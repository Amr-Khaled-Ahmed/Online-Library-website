# Generated by Django 5.2 on 2025-05-16 18:13

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Admin',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='admin_profile', serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'Admins',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Authors',
            fields=[
                ('author_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('biography', models.TextField(blank=True, null=True)),
                ('photo_url', models.URLField(blank=True, max_length=500, null=True)),
            ],
            options={
                'db_table': 'Authors',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Books',
            fields=[
                ('book_id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('isbn', models.CharField(max_length=20, unique=True)),
                ('publication_year', models.IntegerField(blank=True, null=True)),
                ('cover_image_url', models.URLField(blank=True, max_length=500, null=True)),
                ('page_count', models.IntegerField(blank=True, null=True)),
                ('language', models.CharField(blank=True, max_length=50, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('added_date', models.DateTimeField(auto_now_add=True, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'Books',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='customer_profile', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('role', models.IntegerField(default=0)),
                ('profile_picture_url', models.URLField(blank=True, max_length=500, null=True)),
                ('is_a_member', models.BooleanField(default=False)),
                ('membership_last_renewed', models.DateTimeField(blank=True, null=True)),
                ('bio', models.TextField(blank=True, null=True)),
                ('last_seen', models.DateTimeField(blank=True, null=True)),
                ('is_subbed_to_newsletter', models.BooleanField(default=False)),
                ('theme_preference', models.CharField(blank=True, max_length=50, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'Users',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Genres',
            fields=[
                ('genre_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'Genres',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Globalparameters',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'GlobalParameters',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Membershiptypes',
            fields=[
                ('membership_type_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('borrow_duration_in_days', models.IntegerField()),
                ('same_book_borrow_count_limit', models.IntegerField()),
                ('max_renewal_count', models.IntegerField()),
                ('renewal_duration_in_days', models.IntegerField()),
                ('overdue_fee_in_dollars', models.FloatField()),
            ],
            options={
                'db_table': 'MembershipTypes',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Notificationcategories',
            fields=[
                ('notification_category_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('priority', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'NotificationCategories',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Publisher',
            fields=[
                ('publisher_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'Publisher',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Bookcopies',
            fields=[
                ('copy_id', models.AutoField(primary_key=True, serialize=False)),
                ('format', models.CharField(max_length=50)),
                ('is_borrowed', models.BooleanField(default=False)),
                ('in_inventory', models.BooleanField(default=True)),
                ('borrower', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='frontend.bookcopies')),
                ('book', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='frontend.books')),
            ],
            options={
                'db_table': 'BookCopies',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Bookauthor',
            fields=[
                ('bookauthor_id', models.AutoField(primary_key=True, serialize=False)),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='frontend.authors')),
                ('book', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='frontend.books')),
            ],
            options={
                'db_table': 'BookAuthor',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Borrowings',
            fields=[
                ('borrowing_id', models.AutoField(primary_key=True, serialize=False)),
                ('format', models.CharField(max_length=50)),
                ('borrow_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('return_date', models.DateTimeField(blank=True, null=True)),
                ('current_renew_count', models.IntegerField(default=0)),
                ('last_renewal_date', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('copy', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='frontend.bookcopies')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='frontend.customer')),
            ],
            options={
                'db_table': 'Borrowings',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Bookgenre',
            fields=[
                ('bookgenre_id', models.AutoField(primary_key=True, serialize=False)),
                ('book', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='frontend.books')),
                ('genre', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='frontend.genres')),
            ],
            options={
                'db_table': 'BookGenre',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='customer',
            name='membership_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='frontend.membershiptypes'),
        ),
        migrations.CreateModel(
            name='Notifications',
            fields=[
                ('notification_id', models.AutoField(primary_key=True, serialize=False)),
                ('message', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('is_read', models.BooleanField(default=False)),
                ('notification_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='frontend.notificationcategories')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='frontend.customer')),
            ],
            options={
                'db_table': 'Notifications',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='books',
            name='publisher',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='frontend.publisher'),
        ),
        migrations.CreateModel(
            name='Favorites',
            fields=[
                ('favorite_id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='frontend.books')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='frontend.customer')),
            ],
            options={
                'db_table': 'Favorites',
                'managed': True,
                'unique_together': {('user', 'book')},
            },
        ),
        migrations.CreateModel(
            name='Friendships',
            fields=[
                ('friendship_id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user_1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friendships_initiated', to='frontend.customer')),
                ('user_2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friendships_received', to='frontend.customer')),
            ],
            options={
                'db_table': 'Friendships',
                'managed': True,
                'unique_together': {('user_1', 'user_2')},
            },
        ),
        migrations.CreateModel(
            name='Ratings',
            fields=[
                ('rating_id', models.AutoField(primary_key=True, serialize=False)),
                ('value', models.IntegerField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='frontend.books')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='frontend.customer')),
            ],
            options={
                'db_table': 'Ratings',
                'managed': True,
                'unique_together': {('user', 'book')},
            },
        ),
    ]
